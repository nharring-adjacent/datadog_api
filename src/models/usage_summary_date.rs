/*
 * Datadog API V1 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// UsageSummaryDate : Response with hourly report of all data billed by Datadog all organizations.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UsageSummaryDate {
    /// Shows the 99th percentile of all agent hosts over all hours in the current date for all organizations.
    #[serde(rename = "agent_host_top99p", skip_serializing_if = "Option::is_none")]
    pub agent_host_top99p: Option<i64>,
    /// Shows the 99th percentile of all Azure app services using APM over all hours in the current date all organizations.
    #[serde(rename = "apm_azure_app_service_host_top99p", skip_serializing_if = "Option::is_none")]
    pub apm_azure_app_service_host_top99p: Option<i64>,
    /// Shows the 99th percentile of all distinct APM hosts over all hours in the current date for all organizations.
    #[serde(rename = "apm_host_top99p", skip_serializing_if = "Option::is_none")]
    pub apm_host_top99p: Option<i64>,
    /// Shows the 99th percentile of all AWS hosts over all hours in the current date for all organizations.
    #[serde(rename = "aws_host_top99p", skip_serializing_if = "Option::is_none")]
    pub aws_host_top99p: Option<i64>,
    /// Shows the average of the number of functions that executed 1 or more times each hour in the current date for all organizations.
    #[serde(rename = "aws_lambda_func_count", skip_serializing_if = "Option::is_none")]
    pub aws_lambda_func_count: Option<i64>,
    /// Shows the sum of all AWS Lambda invocations over all hours in the current date for all organizations.
    #[serde(rename = "aws_lambda_invocations_sum", skip_serializing_if = "Option::is_none")]
    pub aws_lambda_invocations_sum: Option<i64>,
    /// Shows the 99th percentile of all Azure app services over all hours in the current date for all organizations.
    #[serde(rename = "azure_app_service_top99p", skip_serializing_if = "Option::is_none")]
    pub azure_app_service_top99p: Option<i64>,
    /// Shows the sum of all log bytes ingested over all hours in the current date for all organizations.
    #[serde(rename = "billable_ingested_bytes_sum", skip_serializing_if = "Option::is_none")]
    pub billable_ingested_bytes_sum: Option<i64>,
    /// Shows the sum of compliance containers over all hours in the current date for all organizations.
    #[serde(rename = "compliance_container_count_sum", skip_serializing_if = "Option::is_none")]
    pub compliance_container_count_sum: Option<serde_json::Value>,
    /// Shows the sum of compliance hosts over all hours in the current date for all organizations.
    #[serde(rename = "compliance_host_count_sum", skip_serializing_if = "Option::is_none")]
    pub compliance_host_count_sum: Option<i64>,
    /// Shows the average of all distinct containers over all hours in the current date for all organizations.
    #[serde(rename = "container_avg", skip_serializing_if = "Option::is_none")]
    pub container_avg: Option<i64>,
    /// Shows the high-water mark of all distinct containers over all hours in the current date for all organizations.
    #[serde(rename = "container_hwm", skip_serializing_if = "Option::is_none")]
    pub container_hwm: Option<i64>,
    /// Shows the average number of distinct custom metrics over all hours in the current date for all organizations.
    #[serde(rename = "custom_ts_avg", skip_serializing_if = "Option::is_none")]
    pub custom_ts_avg: Option<i64>,
    /// The date for the usage.
    #[serde(rename = "date", skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    /// Shows the high-watermark of all Fargate tasks over all hours in the current date for all organizations.
    #[serde(rename = "fargate_tasks_count_avg", skip_serializing_if = "Option::is_none")]
    pub fargate_tasks_count_avg: Option<i64>,
    /// Shows the average of all Fargate tasks over all hours in the current date for all organizations.
    #[serde(rename = "fargate_tasks_count_hwm", skip_serializing_if = "Option::is_none")]
    pub fargate_tasks_count_hwm: Option<i64>,
    /// Shows the 99th percentile of all GCP hosts over all hours in the current date for all organizations.
    #[serde(rename = "gcp_host_top99p", skip_serializing_if = "Option::is_none")]
    pub gcp_host_top99p: Option<i64>,
    /// Shows the 99th percentile of all Heroku dynos over all hours in the current date for all organizations.
    #[serde(rename = "heroku_host_top99p", skip_serializing_if = "Option::is_none")]
    pub heroku_host_top99p: Option<i64>,
    /// Shows the high-water mark of incident management monthly active users over all hours in the current date for all organizations.
    #[serde(rename = "incident_management_monthly_active_users_hwm", skip_serializing_if = "Option::is_none")]
    pub incident_management_monthly_active_users_hwm: Option<i64>,
    /// Shows the sum of all log events indexed over all hours in the current date for all organizations.
    #[serde(rename = "indexed_events_count_sum", skip_serializing_if = "Option::is_none")]
    pub indexed_events_count_sum: Option<i64>,
    /// Shows the 99th percentile of all distinct infrastructure hosts over all hours in the current date for all organizations.
    #[serde(rename = "infra_host_top99p", skip_serializing_if = "Option::is_none")]
    pub infra_host_top99p: Option<i64>,
    /// Shows the sum of all log bytes ingested over all hours in the current date for all organizations.
    #[serde(rename = "ingested_events_bytes_sum", skip_serializing_if = "Option::is_none")]
    pub ingested_events_bytes_sum: Option<i64>,
    /// Shows the sum of all IoT devices over all hours in the current date for all organizations.
    #[serde(rename = "iot_device_sum", skip_serializing_if = "Option::is_none")]
    pub iot_device_sum: Option<i64>,
    /// Shows the 99th percentile of all IoT devices over all hours in the current date all organizations.
    #[serde(rename = "iot_device_top99p", skip_serializing_if = "Option::is_none")]
    pub iot_device_top99p: Option<i64>,
    /// Shows the sum of all mobile RUM Sessions on Android over all hours in the current date for all organizations.
    #[serde(rename = "mobile_rum_session_count_android_sum", skip_serializing_if = "Option::is_none")]
    pub mobile_rum_session_count_android_sum: Option<i64>,
    /// Shows the sum of all mobile RUM Sessions on iOS over all hours in the current date for all organizations.
    #[serde(rename = "mobile_rum_session_count_ios_sum", skip_serializing_if = "Option::is_none")]
    pub mobile_rum_session_count_ios_sum: Option<i64>,
    /// Shows the sum of all mobile RUM Sessions over all hours in the current date for all organizations
    #[serde(rename = "mobile_rum_session_count_sum", skip_serializing_if = "Option::is_none")]
    pub mobile_rum_session_count_sum: Option<i64>,
    /// Shows the sum of all Network flows indexed over all hours in the current date for all organizations.
    #[serde(rename = "netflow_indexed_events_count_sum", skip_serializing_if = "Option::is_none")]
    pub netflow_indexed_events_count_sum: Option<i64>,
    /// Shows the 99th percentile of all distinct Networks hosts over all hours in the current date for all organizations.
    #[serde(rename = "npm_host_top99p", skip_serializing_if = "Option::is_none")]
    pub npm_host_top99p: Option<i64>,
    /// Shows the 99th percentile of all hosts reported by the Datadog exporter for the OpenTelemetry Collector over all hours in the current date for all organizations.
    #[serde(rename = "opentelemetry_host_top99p", skip_serializing_if = "Option::is_none")]
    pub opentelemetry_host_top99p: Option<i64>,
    /// Organizations associated with a user.
    #[serde(rename = "orgs", skip_serializing_if = "Option::is_none")]
    pub orgs: Option<Vec<crate::models::UsageSummaryDateOrg>>,
    /// Shows the 99th percentile of all profiled hosts over all hours in the current date for all organizations.
    #[serde(rename = "profiling_host_top99p", skip_serializing_if = "Option::is_none")]
    pub profiling_host_top99p: Option<i64>,
    /// Shows the sum of all browser RUM Sessions over all hours in the current date for all organizations
    #[serde(rename = "rum_session_count_sum", skip_serializing_if = "Option::is_none")]
    pub rum_session_count_sum: Option<i64>,
    /// Shows the sum of RUM Sessions (browser and mobile) over all hours in the current date for all organizations.
    #[serde(rename = "rum_total_session_count_sum", skip_serializing_if = "Option::is_none")]
    pub rum_total_session_count_sum: Option<i64>,
    /// Shows the sum of all Synthetic browser tests over all hours in the current date for all organizations.
    #[serde(rename = "synthetics_browser_check_calls_count_sum", skip_serializing_if = "Option::is_none")]
    pub synthetics_browser_check_calls_count_sum: Option<i64>,
    /// Shows the sum of all Synthetic API tests over all hours in the current date for all organizations.
    #[serde(rename = "synthetics_check_calls_count_sum", skip_serializing_if = "Option::is_none")]
    pub synthetics_check_calls_count_sum: Option<i64>,
    /// Shows the sum of all Indexed Spans indexed over all hours in the current date for all organizations.
    #[serde(rename = "trace_search_indexed_events_count_sum", skip_serializing_if = "Option::is_none")]
    pub trace_search_indexed_events_count_sum: Option<i64>,
    /// Shows the sum of all tracing without limits bytes ingested over all hours in the current date for all organizations.
    #[serde(rename = "twol_ingested_events_bytes_sum", skip_serializing_if = "Option::is_none")]
    pub twol_ingested_events_bytes_sum: Option<i64>,
    /// Shows the 99th percentile of all vSphere hosts over all hours in the current date for all organizations.
    #[serde(rename = "vsphere_host_top99p", skip_serializing_if = "Option::is_none")]
    pub vsphere_host_top99p: Option<i64>,
}

impl UsageSummaryDate {
    /// Response with hourly report of all data billed by Datadog all organizations.
    pub fn new() -> UsageSummaryDate {
        UsageSummaryDate {
            agent_host_top99p: None,
            apm_azure_app_service_host_top99p: None,
            apm_host_top99p: None,
            aws_host_top99p: None,
            aws_lambda_func_count: None,
            aws_lambda_invocations_sum: None,
            azure_app_service_top99p: None,
            billable_ingested_bytes_sum: None,
            compliance_container_count_sum: None,
            compliance_host_count_sum: None,
            container_avg: None,
            container_hwm: None,
            custom_ts_avg: None,
            date: None,
            fargate_tasks_count_avg: None,
            fargate_tasks_count_hwm: None,
            gcp_host_top99p: None,
            heroku_host_top99p: None,
            incident_management_monthly_active_users_hwm: None,
            indexed_events_count_sum: None,
            infra_host_top99p: None,
            ingested_events_bytes_sum: None,
            iot_device_sum: None,
            iot_device_top99p: None,
            mobile_rum_session_count_android_sum: None,
            mobile_rum_session_count_ios_sum: None,
            mobile_rum_session_count_sum: None,
            netflow_indexed_events_count_sum: None,
            npm_host_top99p: None,
            opentelemetry_host_top99p: None,
            orgs: None,
            profiling_host_top99p: None,
            rum_session_count_sum: None,
            rum_total_session_count_sum: None,
            synthetics_browser_check_calls_count_sum: None,
            synthetics_check_calls_count_sum: None,
            trace_search_indexed_events_count_sum: None,
            twol_ingested_events_bytes_sum: None,
            vsphere_host_top99p: None,
        }
    }
}


