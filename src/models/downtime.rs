/*
 * Datadog API V1 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// Downtime : Downtiming gives you greater control over monitor notifications by allowing you to globally exclude scopes from alerting. Downtime settings, which can be scheduled with start and end times, prevent all alerting related to specified Datadog tags.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Downtime {
    /// If a scheduled downtime currently exists.
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    /// If a scheduled downtime is canceled.
    #[serde(rename = "canceled", skip_serializing_if = "Option::is_none")]
    pub canceled: Option<i64>,
    /// User ID of the downtime creator.
    #[serde(rename = "creator_id", skip_serializing_if = "Option::is_none")]
    pub creator_id: Option<i32>,
    /// If a downtime has been disabled.
    #[serde(rename = "disabled", skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// `0` for a downtime applied on `*` or all, `1` when the downtime is only scoped to hosts, or `2` when the downtime is scoped to anything but hosts.
    #[serde(rename = "downtime_type", skip_serializing_if = "Option::is_none")]
    pub downtime_type: Option<i32>,
    /// POSIX timestamp to end the downtime. If not provided, the downtime is in effect indefinitely until you cancel it.
    #[serde(rename = "end", skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    /// The downtime ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    /// A message to include with notifications for this downtime. Email notifications can be sent to specific users by using the same `@username` notation as events.
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// A single monitor to which the downtime applies. If not provided, the downtime applies to all monitors.
    #[serde(rename = "monitor_id", skip_serializing_if = "Option::is_none")]
    pub monitor_id: Option<i64>,
    /// A comma-separated list of monitor tags. For example, tags that are applied directly to monitors, not tags that are used in monitor queries (which are filtered by the scope parameter), to which the downtime applies. The resulting downtime applies to monitors that match ALL provided monitor tags. For example, `service:postgres` **AND** `team:frontend`.
    #[serde(rename = "monitor_tags", skip_serializing_if = "Option::is_none")]
    pub monitor_tags: Option<Vec<String>>,
    /// ID of the parent Downtime.
    #[serde(rename = "parent_id", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<i64>,
    #[serde(rename = "recurrence", skip_serializing_if = "Option::is_none")]
    pub recurrence: Option<Box<crate::models::DowntimeRecurrence>>,
    /// The scope(s) to which the downtime applies. For example, `host:app2`. Provide multiple scopes as a comma-separated list like `env:dev,env:prod`. The resulting downtime applies to sources that matches ALL provided scopes (`env:dev` **AND** `env:prod`).
    #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<Vec<String>>,
    /// POSIX timestamp to start the downtime. If not provided, the downtime starts the moment it is created.
    #[serde(rename = "start", skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
    /// The timezone in which to display the downtime's start and end times in Datadog applications.
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    /// ID of the last user that updated the downtime.
    #[serde(rename = "updater_id", skip_serializing_if = "Option::is_none")]
    pub updater_id: Option<i32>,
}

impl Downtime {
    /// Downtiming gives you greater control over monitor notifications by allowing you to globally exclude scopes from alerting. Downtime settings, which can be scheduled with start and end times, prevent all alerting related to specified Datadog tags.
    pub fn new() -> Downtime {
        Downtime {
            active: None,
            canceled: None,
            creator_id: None,
            disabled: None,
            downtime_type: None,
            end: None,
            id: None,
            message: None,
            monitor_id: None,
            monitor_tags: None,
            parent_id: None,
            recurrence: None,
            scope: None,
            start: None,
            timezone: None,
            updater_id: None,
        }
    }
}


