/*
 * Datadog API V1 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// MetricsQueryMetadata : Object containing all metric names returned and their associated metadata.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetricsQueryMetadata {
    /// Aggregation type.
    #[serde(rename = "aggr", skip_serializing_if = "Option::is_none")]
    pub aggr: Option<String>,
    /// Display name of the metric.
    #[serde(rename = "display_name", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// End of the time window, milliseconds since Unix epoch.
    #[serde(rename = "end", skip_serializing_if = "Option::is_none")]
    pub end: Option<i64>,
    /// Metric expression.
    #[serde(rename = "expression", skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    /// Number of seconds between data samples.
    #[serde(rename = "interval", skip_serializing_if = "Option::is_none")]
    pub interval: Option<i64>,
    /// Number of data samples.
    #[serde(rename = "length", skip_serializing_if = "Option::is_none")]
    pub length: Option<i64>,
    /// Metric name.
    #[serde(rename = "metric", skip_serializing_if = "Option::is_none")]
    pub metric: Option<String>,
    /// List of points of the time series.
    #[serde(rename = "pointlist", skip_serializing_if = "Option::is_none")]
    pub pointlist: Option<Vec<crate::models::Array>>,
    /// Metric scope, comma separated list of tags.
    #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// Start of the time window, milliseconds since Unix epoch.
    #[serde(rename = "start", skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
    /// Detailed information about the metric unit. First element describes the \"primary unit\" (for example, `bytes` in `bytes per second`), second describes the \"per unit\" (for example, `second` in `bytes per second`).
    #[serde(rename = "unit", skip_serializing_if = "Option::is_none")]
    pub unit: Option<Vec<crate::models::MetricsQueryUnit>>,
}

impl MetricsQueryMetadata {
    /// Object containing all metric names returned and their associated metadata.
    pub fn new() -> MetricsQueryMetadata {
        MetricsQueryMetadata {
            aggr: None,
            display_name: None,
            end: None,
            expression: None,
            interval: None,
            length: None,
            metric: None,
            pointlist: None,
            scope: None,
            start: None,
            unit: None,
        }
    }
}


