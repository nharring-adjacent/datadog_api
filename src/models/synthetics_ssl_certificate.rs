/*
 * Datadog API V1 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// SyntheticsSslCertificate : Object describing the SSL certificate used for a Synthetic test.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SyntheticsSslCertificate {
    /// Cipher used for the connection.
    #[serde(rename = "cipher", skip_serializing_if = "Option::is_none")]
    pub cipher: Option<String>,
    /// Exponent associated to the certificate.
    #[serde(rename = "exponent", skip_serializing_if = "Option::is_none")]
    pub exponent: Option<f64>,
    /// Array of extensions and details used for the certificate.
    #[serde(rename = "extKeyUsage", skip_serializing_if = "Option::is_none")]
    pub ext_key_usage: Option<Vec<String>>,
    /// MD5 digest of the DER-encoded Certificate information.
    #[serde(rename = "fingerprint", skip_serializing_if = "Option::is_none")]
    pub fingerprint: Option<String>,
    /// SHA-1 digest of the DER-encoded Certificate information.
    #[serde(rename = "fingerprint256", skip_serializing_if = "Option::is_none")]
    pub fingerprint256: Option<String>,
    #[serde(rename = "issuer", skip_serializing_if = "Option::is_none")]
    pub issuer: Option<Box<crate::models::SyntheticsSslCertificateIssuer>>,
    /// Modulus associated to the SSL certificate private key.
    #[serde(rename = "modulus", skip_serializing_if = "Option::is_none")]
    pub modulus: Option<String>,
    /// TLS protocol used for the test.
    #[serde(rename = "protocol", skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Serial Number assigned by Symantec to the SSL certificate.
    #[serde(rename = "serialNumber", skip_serializing_if = "Option::is_none")]
    pub serial_number: Option<String>,
    #[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<Box<crate::models::SyntheticsSslCertificateSubject>>,
    /// Date from which the SSL certificate is valid.
    #[serde(rename = "validFrom", skip_serializing_if = "Option::is_none")]
    pub valid_from: Option<String>,
    /// Date until which the SSL certificate is valid.
    #[serde(rename = "validTo", skip_serializing_if = "Option::is_none")]
    pub valid_to: Option<String>,
}

impl SyntheticsSslCertificate {
    /// Object describing the SSL certificate used for a Synthetic test.
    pub fn new() -> SyntheticsSslCertificate {
        SyntheticsSslCertificate {
            cipher: None,
            exponent: None,
            ext_key_usage: None,
            fingerprint: None,
            fingerprint256: None,
            issuer: None,
            modulus: None,
            protocol: None,
            serial_number: None,
            subject: None,
            valid_from: None,
            valid_to: None,
        }
    }
}


