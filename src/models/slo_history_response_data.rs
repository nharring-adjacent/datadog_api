/*
 * Datadog API V1 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// SloHistoryResponseData : An array of service level objective objects.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SloHistoryResponseData {
    /// The `from` timestamp in epoch seconds.
    #[serde(rename = "from_ts", skip_serializing_if = "Option::is_none")]
    pub from_ts: Option<i64>,
    /// For `metric` based SLOs where the query includes a group-by clause, this represents the list of grouping parameters.  This is not included in responses for `monitor` based SLOs.
    #[serde(rename = "group_by", skip_serializing_if = "Option::is_none")]
    pub group_by: Option<Vec<String>>,
    /// For grouped SLOs, this represents SLI data for specific groups.  This is not included in the responses for `metric` based SLOs.
    #[serde(rename = "groups", skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<crate::models::SloHistorySliData>>,
    /// For multi-monitor SLOs, this represents SLI data for specific monitors.  This is not included in the responses for `metric` based SLOs.
    #[serde(rename = "monitors", skip_serializing_if = "Option::is_none")]
    pub monitors: Option<Vec<crate::models::SloHistorySliData>>,
    #[serde(rename = "overall", skip_serializing_if = "Option::is_none")]
    pub overall: Option<Box<crate::models::SloHistorySliData>>,
    #[serde(rename = "series", skip_serializing_if = "Option::is_none")]
    pub series: Option<Box<crate::models::SloHistoryMetrics>>,
    /// mapping of string timeframe to the SLO threshold.
    #[serde(rename = "thresholds", skip_serializing_if = "Option::is_none")]
    pub thresholds: Option<::std::collections::HashMap<String, crate::models::SloThreshold>>,
    /// The `to` timestamp in epoch seconds.
    #[serde(rename = "to_ts", skip_serializing_if = "Option::is_none")]
    pub to_ts: Option<i64>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<crate::models::SloType>,
    #[serde(rename = "type_id", skip_serializing_if = "Option::is_none")]
    pub type_id: Option<crate::models::SloTypeNumeric>,
}

impl SloHistoryResponseData {
    /// An array of service level objective objects.
    pub fn new() -> SloHistoryResponseData {
        SloHistoryResponseData {
            from_ts: None,
            group_by: None,
            groups: None,
            monitors: None,
            overall: None,
            series: None,
            thresholds: None,
            to_ts: None,
            _type: None,
            type_id: None,
        }
    }
}


