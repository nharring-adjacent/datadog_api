/*
 * Datadog API V1 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// SyntheticsTestRequest : Object describing the Synthetic test request.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SyntheticsTestRequest {
    #[serde(rename = "basicAuth", skip_serializing_if = "Option::is_none")]
    pub basic_auth: Option<Box<crate::models::SyntheticsBasicAuth>>,
    /// Body to include in the test.
    #[serde(rename = "body", skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(rename = "certificate", skip_serializing_if = "Option::is_none")]
    pub certificate: Option<Box<crate::models::SyntheticsTestRequestCertificate>>,
    /// DNS server to use for DNS tests.
    #[serde(rename = "dnsServer", skip_serializing_if = "Option::is_none")]
    pub dns_server: Option<String>,
    /// DNS server port to use for DNS tests.
    #[serde(rename = "dnsServerPort", skip_serializing_if = "Option::is_none")]
    pub dns_server_port: Option<i32>,
    /// Headers to include when performing the test.
    #[serde(rename = "headers", skip_serializing_if = "Option::is_none")]
    pub headers: Option<::std::collections::HashMap<String, String>>,
    /// Host name to perform the test with.
    #[serde(rename = "host", skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(rename = "method", skip_serializing_if = "Option::is_none")]
    pub method: Option<crate::models::HttpMethod>,
    /// Determines whether or not to save the response body.
    #[serde(rename = "noSavingResponseBody", skip_serializing_if = "Option::is_none")]
    pub no_saving_response_body: Option<bool>,
    /// Number of pings to use per test.
    #[serde(rename = "numberOfPackets", skip_serializing_if = "Option::is_none")]
    pub number_of_packets: Option<i32>,
    /// Port to use when performing the test.
    #[serde(rename = "port", skip_serializing_if = "Option::is_none")]
    pub port: Option<i64>,
    /// Query to use for the test.
    #[serde(rename = "query", skip_serializing_if = "Option::is_none")]
    pub query: Option<serde_json::Value>,
    /// Turns on a traceroute probe to discover all gateways along the path to the host destination.
    #[serde(rename = "shouldTrackHops", skip_serializing_if = "Option::is_none")]
    pub should_track_hops: Option<bool>,
    /// Timeout in seconds for the test.
    #[serde(rename = "timeout", skip_serializing_if = "Option::is_none")]
    pub timeout: Option<f64>,
    /// URL to perform the test with.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl SyntheticsTestRequest {
    /// Object describing the Synthetic test request.
    pub fn new() -> SyntheticsTestRequest {
        SyntheticsTestRequest {
            basic_auth: None,
            body: None,
            certificate: None,
            dns_server: None,
            dns_server_port: None,
            headers: None,
            host: None,
            method: None,
            no_saving_response_body: None,
            number_of_packets: None,
            port: None,
            query: None,
            should_track_hops: None,
            timeout: None,
            url: None,
        }
    }
}


