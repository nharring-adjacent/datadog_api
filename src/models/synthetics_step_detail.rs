/*
 * Datadog API V1 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// SyntheticsStepDetail : Object describing a step for a Synthetic test.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SyntheticsStepDetail {
    /// Array of errors collected for a browser test.
    #[serde(rename = "browserErrors", skip_serializing_if = "Option::is_none")]
    pub browser_errors: Option<Vec<crate::models::SyntheticsBrowserError>>,
    #[serde(rename = "checkType", skip_serializing_if = "Option::is_none")]
    pub check_type: Option<crate::models::SyntheticsCheckType>,
    /// Description of the test.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Total duration in millisecond of the test.
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<f64>,
    /// Error returned by the test.
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    #[serde(rename = "playingTab", skip_serializing_if = "Option::is_none")]
    pub playing_tab: Option<crate::models::SyntheticsPlayingTab>,
    /// Whether or not screenshots where collected by the test.
    #[serde(rename = "screenshotBucketKey", skip_serializing_if = "Option::is_none")]
    pub screenshot_bucket_key: Option<bool>,
    /// Whether or not to skip this step.
    #[serde(rename = "skipped", skip_serializing_if = "Option::is_none")]
    pub skipped: Option<bool>,
    /// Whether or not snapshots where collected by the test.
    #[serde(rename = "snapshotBucketKey", skip_serializing_if = "Option::is_none")]
    pub snapshot_bucket_key: Option<bool>,
    /// The step ID.
    #[serde(rename = "stepId", skip_serializing_if = "Option::is_none")]
    pub step_id: Option<i64>,
    /// If this steps include a sub-test. [Subtests documentation](https://docs.datadoghq.com/synthetics/browser_tests/advanced_options/#subtests).
    #[serde(rename = "subTestStepDetails", skip_serializing_if = "Option::is_none")]
    pub sub_test_step_details: Option<Vec<crate::models::SyntheticsStepDetail>>,
    /// Time before starting the step.
    #[serde(rename = "timeToInteractive", skip_serializing_if = "Option::is_none")]
    pub time_to_interactive: Option<f64>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<crate::models::SyntheticsStepType>,
    /// URL to perform the step against.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// Value for the step.
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<serde_json::Value>,
    /// Array of Core Web Vitals metrics for the step.
    #[serde(rename = "vitalsMetrics", skip_serializing_if = "Option::is_none")]
    pub vitals_metrics: Option<Vec<crate::models::SyntheticsCoreWebVitals>>,
    /// Warning collected that didn't failed the step.
    #[serde(rename = "warnings", skip_serializing_if = "Option::is_none")]
    pub warnings: Option<Vec<crate::models::SyntheticsStepDetailWarning>>,
}

impl SyntheticsStepDetail {
    /// Object describing a step for a Synthetic test.
    pub fn new() -> SyntheticsStepDetail {
        SyntheticsStepDetail {
            browser_errors: None,
            check_type: None,
            description: None,
            duration: None,
            error: None,
            playing_tab: None,
            screenshot_bucket_key: None,
            skipped: None,
            snapshot_bucket_key: None,
            step_id: None,
            sub_test_step_details: None,
            time_to_interactive: None,
            _type: None,
            url: None,
            value: None,
            vitals_metrics: None,
            warnings: None,
        }
    }
}


