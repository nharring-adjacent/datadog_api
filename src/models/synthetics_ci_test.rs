/*
 * Datadog API V1 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// SyntheticsCiTest : Test configuration for Synthetics CI



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SyntheticsCiTest {
    /// Disable certificate checks in API tests.
    #[serde(rename = "allowInsecureCertificates", skip_serializing_if = "Option::is_none")]
    pub allow_insecure_certificates: Option<bool>,
    #[serde(rename = "basicAuth", skip_serializing_if = "Option::is_none")]
    pub basic_auth: Option<Box<crate::models::SyntheticsBasicAuth>>,
    /// Body to include in the test.
    #[serde(rename = "body", skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    /// Type of the data sent in a synthetics API test.
    #[serde(rename = "bodyType", skip_serializing_if = "Option::is_none")]
    pub body_type: Option<String>,
    /// Cookies for the request.
    #[serde(rename = "cookies", skip_serializing_if = "Option::is_none")]
    pub cookies: Option<String>,
    /// For browser test, array with the different device IDs used to run the test.
    #[serde(rename = "deviceIds", skip_serializing_if = "Option::is_none")]
    pub device_ids: Option<Vec<crate::models::SyntheticsDeviceId>>,
    /// For API HTTP test, whether or not the test should follow redirects.
    #[serde(rename = "followRedirects", skip_serializing_if = "Option::is_none")]
    pub follow_redirects: Option<bool>,
    /// Headers to include when performing the test.
    #[serde(rename = "headers", skip_serializing_if = "Option::is_none")]
    pub headers: Option<::std::collections::HashMap<String, String>>,
    /// Array of locations used to run the test.
    #[serde(rename = "locations", skip_serializing_if = "Option::is_none")]
    pub locations: Option<Vec<String>>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Box<crate::models::SyntheticsCiTestMetadata>>,
    /// The public ID of the Synthetics test to trigger.
    #[serde(rename = "public_id")]
    pub public_id: String,
    #[serde(rename = "retry", skip_serializing_if = "Option::is_none")]
    pub retry: Option<Box<crate::models::SyntheticsTestOptionsRetry>>,
    /// Starting URL for the browser test.
    #[serde(rename = "startUrl", skip_serializing_if = "Option::is_none")]
    pub start_url: Option<String>,
    /// Variables to replace in the test.
    #[serde(rename = "variables", skip_serializing_if = "Option::is_none")]
    pub variables: Option<::std::collections::HashMap<String, String>>,
}

impl SyntheticsCiTest {
    /// Test configuration for Synthetics CI
    pub fn new(public_id: String) -> SyntheticsCiTest {
        SyntheticsCiTest {
            allow_insecure_certificates: None,
            basic_auth: None,
            body: None,
            body_type: None,
            cookies: None,
            device_ids: None,
            follow_redirects: None,
            headers: None,
            locations: None,
            metadata: None,
            public_id,
            retry: None,
            start_url: None,
            variables: None,
        }
    }
}


