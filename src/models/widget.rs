/*
 * Datadog API V1 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// Widget : Information about widget.  **Note**: The `layout` property is required for widgets in dashboards with `free` `layout_type`.       For the **new dashboard layout**, the `layout` property depends on the `reflow_type` of the dashboard.       - If `reflow_type` is `fixed`, `layout` is required.       - If `reflow_type` is `auto`, `layout` should not be set.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Widget {
    #[serde(rename = "definition")]
    pub definition: Box<crate::models::WidgetDefinition>,
    /// ID of the widget.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "layout", skip_serializing_if = "Option::is_none")]
    pub layout: Option<Box<crate::models::WidgetLayout>>,
}

impl Widget {
    /// Information about widget.  **Note**: The `layout` property is required for widgets in dashboards with `free` `layout_type`.       For the **new dashboard layout**, the `layout` property depends on the `reflow_type` of the dashboard.       - If `reflow_type` is `fixed`, `layout` is required.       - If `reflow_type` is `auto`, `layout` should not be set.
    pub fn new(definition: crate::models::WidgetDefinition) -> Widget {
        Widget {
            definition: Box::new(definition),
            id: None,
            layout: None,
        }
    }
}


