/*
 * Datadog API V1 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// Host : Object representing a host.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Host {
    /// Host aliases collected by Datadog.
    #[serde(rename = "aliases", skip_serializing_if = "Option::is_none")]
    pub aliases: Option<Vec<String>>,
    /// The Datadog integrations reporting metrics for the host.
    #[serde(rename = "apps", skip_serializing_if = "Option::is_none")]
    pub apps: Option<Vec<String>>,
    /// AWS name of your host.
    #[serde(rename = "aws_name", skip_serializing_if = "Option::is_none")]
    pub aws_name: Option<String>,
    /// The host name.
    #[serde(rename = "host_name", skip_serializing_if = "Option::is_none")]
    pub host_name: Option<String>,
    /// The host ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    /// If a host is muted or unmuted.
    #[serde(rename = "is_muted", skip_serializing_if = "Option::is_none")]
    pub is_muted: Option<bool>,
    /// Last time the host reported a metric data point.
    #[serde(rename = "last_reported_time", skip_serializing_if = "Option::is_none")]
    pub last_reported_time: Option<i64>,
    #[serde(rename = "meta", skip_serializing_if = "Option::is_none")]
    pub meta: Option<Box<crate::models::HostMeta>>,
    #[serde(rename = "metrics", skip_serializing_if = "Option::is_none")]
    pub metrics: Option<Box<crate::models::HostMetrics>>,
    /// Timeout of the mute applied to your host.
    #[serde(rename = "mute_timeout", skip_serializing_if = "Option::is_none")]
    pub mute_timeout: Option<i64>,
    /// The host name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Source or cloud provider associated with your host.
    #[serde(rename = "sources", skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<String>>,
    /// List of tags for each source (AWS, Datadog Agent, Chef..).
    #[serde(rename = "tags_by_source", skip_serializing_if = "Option::is_none")]
    pub tags_by_source: Option<::std::collections::HashMap<String, Vec<String>>>,
    /// Displays UP when the expected metrics are received and displays `???` if no metrics are received.
    #[serde(rename = "up", skip_serializing_if = "Option::is_none")]
    pub up: Option<bool>,
}

impl Host {
    /// Object representing a host.
    pub fn new() -> Host {
        Host {
            aliases: None,
            apps: None,
            aws_name: None,
            host_name: None,
            id: None,
            is_muted: None,
            last_reported_time: None,
            meta: None,
            metrics: None,
            mute_timeout: None,
            name: None,
            sources: None,
            tags_by_source: None,
            up: None,
        }
    }
}


