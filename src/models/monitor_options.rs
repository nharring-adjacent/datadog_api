/*
 * Datadog API V1 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// MonitorOptions : List of options associated with your monitor.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MonitorOptions {
    #[serde(rename = "aggregation", skip_serializing_if = "Option::is_none")]
    pub aggregation: Option<Box<crate::models::MonitorOptionsAggregation>>,
    /// IDs of the device the Synthetics monitor is running on.
    #[serde(rename = "device_ids", skip_serializing_if = "Option::is_none")]
    pub device_ids: Option<Vec<crate::models::MonitorDeviceId>>,
    /// Whether or not to send a log sample when the log monitor triggers.
    #[serde(rename = "enable_logs_sample", skip_serializing_if = "Option::is_none")]
    pub enable_logs_sample: Option<bool>,
    /// A message to include with a re-notification. Supports the `@username` notification we allow elsewhere. Not applicable if `renotify_interval` is `None`.
    #[serde(rename = "escalation_message", skip_serializing_if = "Option::is_none")]
    pub escalation_message: Option<String>,
    /// Time (in seconds) to delay evaluation, as a non-negative integer. For example, if the value is set to `300` (5min), the timeframe is set to `last_5m` and the time is 7:00, the monitor evaluates data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor always has data during evaluation.
    #[serde(rename = "evaluation_delay", skip_serializing_if = "Option::is_none")]
    pub evaluation_delay: Option<i64>,
    /// Whether the log alert monitor triggers a single alert or multiple alerts when any group breaches a threshold.
    #[serde(rename = "groupby_simple_monitor", skip_serializing_if = "Option::is_none")]
    pub groupby_simple_monitor: Option<bool>,
    /// A Boolean indicating whether notifications from this monitor automatically inserts its triggering tags into the title.  **Examples** - If `True`, `[Triggered on {host:h1}] Monitor Title` - If `False`, `[Triggered] Monitor Title`
    #[serde(rename = "include_tags", skip_serializing_if = "Option::is_none")]
    pub include_tags: Option<bool>,
    /// Whether or not the monitor is locked (only editable by creator and admins).
    #[serde(rename = "locked", skip_serializing_if = "Option::is_none")]
    pub locked: Option<bool>,
    /// How long the test should be in failure before alerting (integer, number of seconds, max 7200).
    #[serde(rename = "min_failure_duration", skip_serializing_if = "Option::is_none")]
    pub min_failure_duration: Option<i64>,
    /// The minimum number of locations in failure at the same time during at least one moment in the `min_failure_duration` period (`min_location_failed` and `min_failure_duration` are part of the advanced alerting rules - integer, >= 1).
    #[serde(rename = "min_location_failed", skip_serializing_if = "Option::is_none")]
    pub min_location_failed: Option<i64>,
    /// Time (in seconds) to allow a host to boot and applications to fully start before starting the evaluation of monitor results. Should be a non negative integer.
    #[serde(rename = "new_host_delay", skip_serializing_if = "Option::is_none")]
    pub new_host_delay: Option<i64>,
    /// The number of minutes before a monitor notifies after data stops reporting. Datadog recommends at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks. If omitted, 2x the evaluation timeframe is used for metric alerts, and 24 hours is used for service checks.
    #[serde(rename = "no_data_timeframe", skip_serializing_if = "Option::is_none")]
    pub no_data_timeframe: Option<i64>,
    /// A Boolean indicating whether tagged users is notified on changes to this monitor.
    #[serde(rename = "notify_audit", skip_serializing_if = "Option::is_none")]
    pub notify_audit: Option<bool>,
    /// A Boolean indicating whether this monitor notifies when data stops reporting.
    #[serde(rename = "notify_no_data", skip_serializing_if = "Option::is_none")]
    pub notify_no_data: Option<bool>,
    /// The number of minutes after the last notification before a monitor re-notifies on the current status. It only re-notifies if it’s not resolved.
    #[serde(rename = "renotify_interval", skip_serializing_if = "Option::is_none")]
    pub renotify_interval: Option<i64>,
    /// A Boolean indicating whether this monitor needs a full window of data before it’s evaluated. We highly recommend you set this to `false` for sparse metrics, otherwise some evaluations are skipped. Default is false.
    #[serde(rename = "require_full_window", skip_serializing_if = "Option::is_none")]
    pub require_full_window: Option<bool>,
    /// Information about the downtime applied to the monitor.
    #[serde(rename = "silenced", skip_serializing_if = "Option::is_none")]
    pub silenced: Option<::std::collections::HashMap<String, i64>>,
    /// ID of the corresponding Synthetic check.
    #[serde(rename = "synthetics_check_id", skip_serializing_if = "Option::is_none")]
    pub synthetics_check_id: Option<String>,
    #[serde(rename = "threshold_windows", skip_serializing_if = "Option::is_none")]
    pub threshold_windows: Option<Box<crate::models::MonitorThresholdWindowOptions>>,
    #[serde(rename = "thresholds", skip_serializing_if = "Option::is_none")]
    pub thresholds: Option<Box<crate::models::MonitorThresholds>>,
    /// The number of hours of the monitor not reporting data before it automatically resolves from a triggered state.
    #[serde(rename = "timeout_h", skip_serializing_if = "Option::is_none")]
    pub timeout_h: Option<i64>,
}

impl MonitorOptions {
    /// List of options associated with your monitor.
    pub fn new() -> MonitorOptions {
        MonitorOptions {
            aggregation: None,
            device_ids: None,
            enable_logs_sample: None,
            escalation_message: None,
            evaluation_delay: None,
            groupby_simple_monitor: None,
            include_tags: None,
            locked: None,
            min_failure_duration: None,
            min_location_failed: None,
            new_host_delay: None,
            no_data_timeframe: None,
            notify_audit: None,
            notify_no_data: None,
            renotify_interval: None,
            require_full_window: None,
            silenced: None,
            synthetics_check_id: None,
            threshold_windows: None,
            thresholds: None,
            timeout_h: None,
        }
    }
}


