/*
 * Datadog API V1 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// LogsServiceRemapper : Use this processor if you want to assign one or more attributes as the official service.  **Note:** If multiple service remapper processors can be applied to a given log, only the first one (according to the pipeline order) is taken into account.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LogsServiceRemapper {
    /// Whether or not the processor is enabled.
    #[serde(rename = "is_enabled", skip_serializing_if = "Option::is_none")]
    pub is_enabled: Option<bool>,
    /// Name of the processor.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Array of source attributes.
    #[serde(rename = "sources")]
    pub sources: Vec<String>,
    #[serde(rename = "type")]
    pub _type: crate::models::LogsServiceRemapperType,
}

impl LogsServiceRemapper {
    /// Use this processor if you want to assign one or more attributes as the official service.  **Note:** If multiple service remapper processors can be applied to a given log, only the first one (according to the pipeline order) is taken into account.
    pub fn new(sources: Vec<String>, _type: crate::models::LogsServiceRemapperType) -> LogsServiceRemapper {
        LogsServiceRemapper {
            is_enabled: None,
            name: None,
            sources,
            _type,
        }
    }
}


