/*
 * Datadog API V1 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// EventCreateResponse : Object containing an event response.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventCreateResponse {
    #[serde(rename = "alert_type", skip_serializing_if = "Option::is_none")]
    pub alert_type: Option<crate::models::EventAlertType>,
    /// POSIX timestamp of the event. Must be sent as an integer (i.e. no quotes). Limited to events no older than 7 days.
    #[serde(rename = "date_happened", skip_serializing_if = "Option::is_none")]
    pub date_happened: Option<i64>,
    /// A device name.
    #[serde(rename = "device_name", skip_serializing_if = "Option::is_none")]
    pub device_name: Option<String>,
    /// Host name to associate with the event. Any tags associated with the host are also applied to this event.
    #[serde(rename = "host", skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Integer ID of the event.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    /// Payload of the event.
    #[serde(rename = "payload", skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<crate::models::EventPriority>,
    /// ID of the parent event. Must be sent as an integer (i.e. no quotes).
    #[serde(rename = "related_event_id", skip_serializing_if = "Option::is_none")]
    pub related_event_id: Option<i64>,
    /// The type of event being posted. Option examples include nagios, hudson, jenkins, my_apps, chef, puppet, git, bitbucket, etc. A complete list of source attribute values [available here](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value).
    #[serde(rename = "source_type_name", skip_serializing_if = "Option::is_none")]
    pub source_type_name: Option<String>,
    /// A status.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// A list of tags to apply to the event.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// The body of the event. Limited to 4000 characters. The text supports markdown. Use `msg_text` with the Datadog Ruby library.
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    /// The event title. Limited to 100 characters. Use `msg_title` with the Datadog Ruby library.
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// URL of the event.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl EventCreateResponse {
    /// Object containing an event response.
    pub fn new() -> EventCreateResponse {
        EventCreateResponse {
            alert_type: None,
            date_happened: None,
            device_name: None,
            host: None,
            id: None,
            payload: None,
            priority: None,
            related_event_id: None,
            source_type_name: None,
            status: None,
            tags: None,
            text: None,
            title: None,
            url: None,
        }
    }
}


