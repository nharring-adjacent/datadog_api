/*
 * Datadog API V1 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// LogsGrokParser : Create custom grok rules to parse the full message or [a specific attribute of your raw event](https://docs.datadoghq.com/logs/processing/parsing/#advanced-settings). For more information, see the [parsing section](https://docs.datadoghq.com/logs/processing/parsing).



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LogsGrokParser {
    #[serde(rename = "grok")]
    pub grok: Box<crate::models::LogsGrokParserRules>,
    /// Whether or not the processor is enabled.
    #[serde(rename = "is_enabled", skip_serializing_if = "Option::is_none")]
    pub is_enabled: Option<bool>,
    /// Name of the processor.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// List of sample logs to test this grok parser.
    #[serde(rename = "samples", skip_serializing_if = "Option::is_none")]
    pub samples: Option<Vec<String>>,
    /// Name of the log attribute to parse.
    #[serde(rename = "source")]
    pub source: String,
    #[serde(rename = "type")]
    pub _type: crate::models::LogsGrokParserType,
}

impl LogsGrokParser {
    /// Create custom grok rules to parse the full message or [a specific attribute of your raw event](https://docs.datadoghq.com/logs/processing/parsing/#advanced-settings). For more information, see the [parsing section](https://docs.datadoghq.com/logs/processing/parsing).
    pub fn new(grok: crate::models::LogsGrokParserRules, source: String, _type: crate::models::LogsGrokParserType) -> LogsGrokParser {
        LogsGrokParser {
            grok: Box::new(grok),
            is_enabled: None,
            name: None,
            samples: None,
            source,
            _type,
        }
    }
}


