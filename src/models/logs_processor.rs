/*
 * Datadog API V1 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// LogsProcessor : Definition of a logs processor.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LogsProcessor {
    #[serde(rename = "grok")]
    pub grok: Box<crate::models::LogsGrokParserRules>,
    /// Whether or not the processor is enabled.
    #[serde(rename = "is_enabled", skip_serializing_if = "Option::is_none")]
    pub is_enabled: Option<bool>,
    /// Name of the processor.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// List of sample logs to test this grok parser.
    #[serde(rename = "samples", skip_serializing_if = "Option::is_none")]
    pub samples: Option<Vec<String>>,
    /// Source attribute used to perform the lookup.
    #[serde(rename = "source")]
    pub source: String,
    #[serde(rename = "type")]
    pub _type: crate::models::LogsTraceRemapperType,
    /// Array of source attributes.
    #[serde(rename = "sources")]
    pub sources: Vec<String>,
    /// Override or not the target element if already set,
    #[serde(rename = "override_on_conflict", skip_serializing_if = "Option::is_none")]
    pub override_on_conflict: Option<bool>,
    /// Remove or preserve the remapped source element.
    #[serde(rename = "preserve_source", skip_serializing_if = "Option::is_none")]
    pub preserve_source: Option<bool>,
    /// Defines if the sources are from log `attribute` or `tag`.
    #[serde(rename = "source_type", skip_serializing_if = "Option::is_none")]
    pub source_type: Option<String>,
    /// Name of the attribute that contains the corresponding value in the mapping list or the `default_lookup` if not found in the mapping list.
    #[serde(rename = "target")]
    pub target: String,
    #[serde(rename = "target_format", skip_serializing_if = "Option::is_none")]
    pub target_format: Option<crate::models::TargetFormatType>,
    /// Defines if the final attribute or tag name is from log `attribute` or `tag`.
    #[serde(rename = "target_type", skip_serializing_if = "Option::is_none")]
    pub target_type: Option<String>,
    /// Normalize the ending slashes or not.
    #[serde(rename = "normalize_ending_slashes", skip_serializing_if = "Option::is_none")]
    pub normalize_ending_slashes: Option<bool>,
    /// Define if the source attribute is URL encoded or not.
    #[serde(rename = "is_encoded", skip_serializing_if = "Option::is_none")]
    pub is_encoded: Option<bool>,
    /// Array of filters to match or not a log and their corresponding `name`to assign a custom value to the log.
    #[serde(rename = "categories")]
    pub categories: Vec<crate::models::LogsCategoryProcessorCategory>,
    /// Arithmetic operation between one or more log attributes.
    #[serde(rename = "expression")]
    pub expression: String,
    /// If true, it replaces all missing attributes of `template` by an empty string. If `false` (default), skips the operation for missing attributes.
    #[serde(rename = "is_replace_missing", skip_serializing_if = "Option::is_none")]
    pub is_replace_missing: Option<bool>,
    /// A formula with one or more attributes and raw text.
    #[serde(rename = "template")]
    pub template: String,
    #[serde(rename = "filter", skip_serializing_if = "Option::is_none")]
    pub filter: Option<Box<crate::models::LogsFilter>>,
    /// Ordered list of processors in this pipeline.
    #[serde(rename = "processors", skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<crate::models::LogsProcessor>>,
    /// Value to set the target attribute if the source value is not found in the list.
    #[serde(rename = "default_lookup", skip_serializing_if = "Option::is_none")]
    pub default_lookup: Option<String>,
    /// Mapping table of values for the source attribute and their associated target attribute values, formatted as `[\"source_key1,target_value1\", \"source_key2,target_value2\"]`
    #[serde(rename = "lookup_table")]
    pub lookup_table: Vec<String>,
}

impl LogsProcessor {
    /// Definition of a logs processor.
    pub fn new(grok: crate::models::LogsGrokParserRules, source: String, _type: crate::models::LogsTraceRemapperType, sources: Vec<String>, target: String, categories: Vec<crate::models::LogsCategoryProcessorCategory>, expression: String, template: String, lookup_table: Vec<String>) -> LogsProcessor {
        LogsProcessor {
            grok: Box::new(grok),
            is_enabled: None,
            name: None,
            samples: None,
            source,
            _type,
            sources,
            override_on_conflict: None,
            preserve_source: None,
            source_type: None,
            target,
            target_format: None,
            target_type: None,
            normalize_ending_slashes: None,
            is_encoded: None,
            categories,
            expression,
            is_replace_missing: None,
            template,
            filter: None,
            processors: None,
            default_lookup: None,
            lookup_table,
        }
    }
}


