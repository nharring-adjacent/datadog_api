/*
 * Datadog API V1 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// UsageLogsHour : Hour usage for logs.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UsageLogsHour {
    /// Contains the number of billable log bytes ingested.
    #[serde(rename = "billable_ingested_bytes", skip_serializing_if = "Option::is_none")]
    pub billable_ingested_bytes: Option<i64>,
    /// The hour for the usage.
    #[serde(rename = "hour", skip_serializing_if = "Option::is_none")]
    pub hour: Option<String>,
    /// Contains the number of log events indexed.
    #[serde(rename = "indexed_events_count", skip_serializing_if = "Option::is_none")]
    pub indexed_events_count: Option<i64>,
    /// Contains the number of log bytes ingested.
    #[serde(rename = "ingested_events_bytes", skip_serializing_if = "Option::is_none")]
    pub ingested_events_bytes: Option<i64>,
    /// Contains the number of live log events indexed (data available as of December 1, 2020).
    #[serde(rename = "logs_live_indexed_count", skip_serializing_if = "Option::is_none")]
    pub logs_live_indexed_count: Option<i64>,
    /// Contains the number of live log bytes ingested (data available as of December 1, 2020).
    #[serde(rename = "logs_live_ingested_bytes", skip_serializing_if = "Option::is_none")]
    pub logs_live_ingested_bytes: Option<i64>,
    /// Contains the number of rehydrated log events indexed (data available as of December 1, 2020).
    #[serde(rename = "logs_rehydrated_indexed_count", skip_serializing_if = "Option::is_none")]
    pub logs_rehydrated_indexed_count: Option<i64>,
    /// Contains the number of rehydrated log bytes ingested (data available as of December 1, 2020).
    #[serde(rename = "logs_rehydrated_ingested_bytes", skip_serializing_if = "Option::is_none")]
    pub logs_rehydrated_ingested_bytes: Option<i64>,
}

impl UsageLogsHour {
    /// Hour usage for logs.
    pub fn new() -> UsageLogsHour {
        UsageLogsHour {
            billable_ingested_bytes: None,
            hour: None,
            indexed_events_count: None,
            ingested_events_bytes: None,
            logs_live_indexed_count: None,
            logs_live_ingested_bytes: None,
            logs_rehydrated_indexed_count: None,
            logs_rehydrated_ingested_bytes: None,
        }
    }
}


