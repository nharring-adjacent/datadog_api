/*
 * Datadog API V1 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// FormulaAndFunctionQueryDefinition : A formula and function query.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FormulaAndFunctionQueryDefinition {
    #[serde(rename = "aggregator", skip_serializing_if = "Option::is_none")]
    pub aggregator: Option<crate::models::FormulaAndFunctionMetricAggregation>,
    #[serde(rename = "data_source")]
    pub data_source: crate::models::FormulaAndFunctionProcessQueryDataSource,
    /// Name of query for use in formulas.
    #[serde(rename = "name")]
    pub name: String,
    /// Metrics query definition.
    #[serde(rename = "query")]
    pub query: String,
    #[serde(rename = "compute")]
    pub compute: Box<crate::models::FormulaAndFunctionEventQueryDefinitionCompute>,
    /// Group by options.
    #[serde(rename = "group_by", skip_serializing_if = "Option::is_none")]
    pub group_by: Option<Vec<crate::models::FormulaAndFunctionEventQueryGroupBy>>,
    /// An array of index names to query in the stream. Omit or use `[]` to query all indexes at once.
    #[serde(rename = "indexes", skip_serializing_if = "Option::is_none")]
    pub indexes: Option<Vec<String>>,
    #[serde(rename = "search", skip_serializing_if = "Option::is_none")]
    pub search: Option<Box<crate::models::FormulaAndFunctionEventQueryDefinitionSearch>>,
    /// Whether to normalize the CPU percentages.
    #[serde(rename = "is_normalized_cpu", skip_serializing_if = "Option::is_none")]
    pub is_normalized_cpu: Option<bool>,
    /// Number of hits to return.
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
    /// Process metric name.
    #[serde(rename = "metric")]
    pub metric: String,
    #[serde(rename = "sort", skip_serializing_if = "Option::is_none")]
    pub sort: Option<crate::models::QuerySortOrder>,
    /// An array of tags to filter by.
    #[serde(rename = "tag_filters", skip_serializing_if = "Option::is_none")]
    pub tag_filters: Option<Vec<String>>,
    /// Text to use as filter.
    #[serde(rename = "text_filter", skip_serializing_if = "Option::is_none")]
    pub text_filter: Option<String>,
}

impl FormulaAndFunctionQueryDefinition {
    /// A formula and function query.
    pub fn new(data_source: crate::models::FormulaAndFunctionProcessQueryDataSource, name: String, query: String, compute: crate::models::FormulaAndFunctionEventQueryDefinitionCompute, metric: String) -> FormulaAndFunctionQueryDefinition {
        FormulaAndFunctionQueryDefinition {
            aggregator: None,
            data_source,
            name,
            query,
            compute: Box::new(compute),
            group_by: None,
            indexes: None,
            search: None,
            is_normalized_cpu: None,
            limit: None,
            metric,
            sort: None,
            tag_filters: None,
            text_filter: None,
        }
    }
}


