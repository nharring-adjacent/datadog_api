/*
 * Datadog API V1 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// TableWidgetRequest : Updated table widget.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TableWidgetRequest {
    #[serde(rename = "aggregator", skip_serializing_if = "Option::is_none")]
    pub aggregator: Option<crate::models::WidgetAggregator>,
    /// The column name (defaults to the metric name).
    #[serde(rename = "alias", skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
    #[serde(rename = "apm_query", skip_serializing_if = "Option::is_none")]
    pub apm_query: Option<Box<crate::models::LogQueryDefinition>>,
    #[serde(rename = "apm_stats_query", skip_serializing_if = "Option::is_none")]
    pub apm_stats_query: Option<Box<crate::models::ApmStatsQueryDefinition>>,
    /// A list of display modes for each table cell.
    #[serde(rename = "cell_display_mode", skip_serializing_if = "Option::is_none")]
    pub cell_display_mode: Option<Vec<crate::models::TableWidgetCellDisplayMode>>,
    /// List of conditional formats.
    #[serde(rename = "conditional_formats", skip_serializing_if = "Option::is_none")]
    pub conditional_formats: Option<Vec<crate::models::WidgetConditionalFormat>>,
    #[serde(rename = "event_query", skip_serializing_if = "Option::is_none")]
    pub event_query: Option<Box<crate::models::LogQueryDefinition>>,
    /// For metric queries, the number of lines to show in the table. Only one request should have this property.
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
    #[serde(rename = "log_query", skip_serializing_if = "Option::is_none")]
    pub log_query: Option<Box<crate::models::LogQueryDefinition>>,
    #[serde(rename = "network_query", skip_serializing_if = "Option::is_none")]
    pub network_query: Option<Box<crate::models::LogQueryDefinition>>,
    #[serde(rename = "order", skip_serializing_if = "Option::is_none")]
    pub order: Option<crate::models::WidgetSort>,
    #[serde(rename = "process_query", skip_serializing_if = "Option::is_none")]
    pub process_query: Option<Box<crate::models::ProcessQueryDefinition>>,
    #[serde(rename = "profile_metrics_query", skip_serializing_if = "Option::is_none")]
    pub profile_metrics_query: Option<Box<crate::models::LogQueryDefinition>>,
    /// Query definition.
    #[serde(rename = "q", skip_serializing_if = "Option::is_none")]
    pub q: Option<String>,
    #[serde(rename = "rum_query", skip_serializing_if = "Option::is_none")]
    pub rum_query: Option<Box<crate::models::LogQueryDefinition>>,
    #[serde(rename = "security_query", skip_serializing_if = "Option::is_none")]
    pub security_query: Option<Box<crate::models::LogQueryDefinition>>,
}

impl TableWidgetRequest {
    /// Updated table widget.
    pub fn new() -> TableWidgetRequest {
        TableWidgetRequest {
            aggregator: None,
            alias: None,
            apm_query: None,
            apm_stats_query: None,
            cell_display_mode: None,
            conditional_formats: None,
            event_query: None,
            limit: None,
            log_query: None,
            network_query: None,
            order: None,
            process_query: None,
            profile_metrics_query: None,
            q: None,
            rum_query: None,
            security_query: None,
        }
    }
}


