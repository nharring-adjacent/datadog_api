/*
 * Datadog API V1 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// MonitorUpdateRequest : Object describing a monitor update request.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MonitorUpdateRequest {
    /// Timestamp of the monitor creation.
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "creator", skip_serializing_if = "Option::is_none")]
    pub creator: Option<Box<crate::models::Creator>>,
    /// Whether or not the monitor is deleted. (Always `null`)
    #[serde(rename = "deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<String>,
    /// ID of this monitor.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    /// A message to include with notifications for this monitor.
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Last timestamp when the monitor was edited.
    #[serde(rename = "modified", skip_serializing_if = "Option::is_none")]
    pub modified: Option<String>,
    /// Whether or not the monitor is broken down on different groups.
    #[serde(rename = "multi", skip_serializing_if = "Option::is_none")]
    pub multi: Option<bool>,
    /// The monitor name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
    pub options: Option<Box<crate::models::MonitorOptions>>,
    #[serde(rename = "overall_state", skip_serializing_if = "Option::is_none")]
    pub overall_state: Option<crate::models::MonitorOverallStates>,
    /// Integer from 1 (high) to 5 (low) indicating alert severity.
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
    /// The monitor query.
    #[serde(rename = "query", skip_serializing_if = "Option::is_none")]
    pub query: Option<String>,
    /// A list of role identifiers that can be pulled from the Roles API. Cannot be used with `locked` option.
    #[serde(rename = "restricted_roles", skip_serializing_if = "Option::is_none")]
    pub restricted_roles: Option<Vec<String>>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<Box<crate::models::MonitorState>>,
    /// Tags associated to your monitor.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<crate::models::MonitorType>,
}

impl MonitorUpdateRequest {
    /// Object describing a monitor update request.
    pub fn new() -> MonitorUpdateRequest {
        MonitorUpdateRequest {
            created: None,
            creator: None,
            deleted: None,
            id: None,
            message: None,
            modified: None,
            multi: None,
            name: None,
            options: None,
            overall_state: None,
            priority: None,
            query: None,
            restricted_roles: None,
            state: None,
            tags: None,
            _type: None,
        }
    }
}


