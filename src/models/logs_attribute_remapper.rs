/*
 * Datadog API V1 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// LogsAttributeRemapper : The remapper processor remaps any source attribute(s) or tag to another target attribute or tag. Constraints on the tag/attribute name are explained in the [Tag Best Practice documentation](https://docs.datadoghq.com/logs/guide/log-parsing-best-practice). Some additional constraints are applied as `:` or `,` are not allowed in the target tag/attribute name.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LogsAttributeRemapper {
    /// Whether or not the processor is enabled.
    #[serde(rename = "is_enabled", skip_serializing_if = "Option::is_none")]
    pub is_enabled: Option<bool>,
    /// Name of the processor.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Override or not the target element if already set,
    #[serde(rename = "override_on_conflict", skip_serializing_if = "Option::is_none")]
    pub override_on_conflict: Option<bool>,
    /// Remove or preserve the remapped source element.
    #[serde(rename = "preserve_source", skip_serializing_if = "Option::is_none")]
    pub preserve_source: Option<bool>,
    /// Defines if the sources are from log `attribute` or `tag`.
    #[serde(rename = "source_type", skip_serializing_if = "Option::is_none")]
    pub source_type: Option<String>,
    /// Array of source attributes.
    #[serde(rename = "sources")]
    pub sources: Vec<String>,
    /// Final attribute or tag name to remap the sources to.
    #[serde(rename = "target")]
    pub target: String,
    #[serde(rename = "target_format", skip_serializing_if = "Option::is_none")]
    pub target_format: Option<crate::models::TargetFormatType>,
    /// Defines if the final attribute or tag name is from log `attribute` or `tag`.
    #[serde(rename = "target_type", skip_serializing_if = "Option::is_none")]
    pub target_type: Option<String>,
    #[serde(rename = "type")]
    pub _type: crate::models::LogsAttributeRemapperType,
}

impl LogsAttributeRemapper {
    /// The remapper processor remaps any source attribute(s) or tag to another target attribute or tag. Constraints on the tag/attribute name are explained in the [Tag Best Practice documentation](https://docs.datadoghq.com/logs/guide/log-parsing-best-practice). Some additional constraints are applied as `:` or `,` are not allowed in the target tag/attribute name.
    pub fn new(sources: Vec<String>, target: String, _type: crate::models::LogsAttributeRemapperType) -> LogsAttributeRemapper {
        LogsAttributeRemapper {
            is_enabled: None,
            name: None,
            override_on_conflict: None,
            preserve_source: None,
            source_type: None,
            sources,
            target,
            target_format: None,
            target_type: None,
            _type,
        }
    }
}


